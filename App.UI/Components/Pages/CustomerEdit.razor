@page "/customer/{CustomerId:guid?}"
@using global::App.Library.Models
@using global::App.UI.Services
@inject CustomerService CustomerService
@inject NavigationManager Navigation

<h3>Customer Form</h3>

<EditForm Model="CustomerDto" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3 row">
        <label for="firstName" class="form-label">First Name:</label>
        <InputText class="form-control" id="firstName" @bind-Value="CustomerDto.FirstName" />
    </div>
    <div class="mb-3 row">
        <label for="middleName" class="form-label">Middle Name:</label>
        <InputText class="form-control" id="middleName" @bind-Value="CustomerDto.MiddleName" />
    </div>
    <div class="mb-3 row">
        <label for="lastName" class="form-label">Last Name:</label>
        <InputText class="form-control" id="lastName" @bind-Value="CustomerDto.LastName" />
    </div>
    <div class="mb-3 row">
        <label for="email" class="form-label">Email:</label>
        <InputText class="form-control" id="email" @bind-Value="CustomerDto.Email" />
    </div>
    <div class="mb-3 row">
        <label for="phone" class="form-label">Phone:</label>
        <InputText class="form-control" id="phone" @bind-Value="CustomerDto.Phone" />
    </div>
    <button class="btn btn-primary mt-3" type="submit">Save</button>
</EditForm>

@code {
    [Parameter]
    public Guid? CustomerId { get; set; }
    private CustomerDto CustomerDto = new CustomerDto();

    protected override async Task OnInitializedAsync()
    {
        if (CustomerId.HasValue)
        {
            CustomerDto = await CustomerService.GetCustomerAsync(CustomerId.Value);
        }
    }

    private async Task HandleValidSubmit()
    {
        if (CustomerId == null)
        {
            CustomerDto.CustomerId = Guid.NewGuid();
            await CustomerService.CreateCustomerAsync(CustomerDto);
        }
        else
        {
            await CustomerService.UpdateCustomerAsync(CustomerDto.CustomerId, CustomerDto);
        }
        Navigation.NavigateTo("/customers");
    }
}
